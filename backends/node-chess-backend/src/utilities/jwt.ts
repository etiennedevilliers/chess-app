import * as jwt from 'jsonwebtoken';
import { IUser } from '../interfaces/models';
import { IPayload } from '../interfaces/payload.interface';

const debug = require('debug')('app:utilities:jwt');

const privateKeyEncoded = process.env.JWT_PRIVATE_KEY;
const publicKeyEncoded = process.env.JWT_PUBLIC_KEY;

const testPrivateKeyEncoded = 'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlKS1FJQkFBS0NBZ0VBM0xScHpmeFlWMGtZNDdnWWk1QkJ3UmhxcjNRVEk0Y1c1VllrT2l6ZndoMkdnVm1XCjllTkQ5ckJKQ2Z6bVc3TURsSTVhZ1F4V3htWjFaUEFXbG1zcHpwMFVGS2ZmYW5RRTc2MTRUV3JrcDBtM2dSTHoKdjBKVVo2ZUNZbDZyT0NDRU9LQmIyb0dRRXNENFgxUVJrNHdXSERPcHJYdDVodDVKMkRNdWMzSVhJVVhZWjRKNApGU3hwVklka1hOK2tBc3FUVEs4QU1oQVhjRWxTQzRickRHK3F4dTJoYjRlVWFVdEY1SlNxSGF4dFlRbjM4VHlLCmVkZTNkay85eml6cHduU1Q5WkI4b3l3b3o4N2c3T2loQTJuT3hKWEIzYURlamxmdlh6MFZpMzZGWVFOVGI3dXQKL1JuZlIxaEhCckpuTVdtQVpLZlhWMC9GdG5oRFFjeEJsU2tFSEErSWNxZCtDRzRhb0x6cXhaREkrM0tqUWZqcApIV2F6dlRzUzNubmpFM3NVTWZVQlNGQUd4WGM3N05MMnl6NWZxRGI5THJ1aTE0OVQ1bXk3UDFYU29MY2NPSkVjCmhDcEdOaWhPN0tJNXMxbFc3UFFZTkVSdVVUcnJGRWpvSGhPeXhaMjBOSGh6R2FSbDBCWEk4UzFUZ0JRSGVnYVAKVzluK0Q3NzRUR1I1MHZBNWVDa0YwU0NJclB5QXdUZWRDUG1UMW5kUXdtbjZURk1QWklYd0RNNjdaUHFyM0Nzcwpab085R29JeEhzYUNpNTFYTXdjL1VvaWd1bFZ5V2RIMHBFM05mL2hFdXFLWUtRNVdVZU5kRERGZk1KQXpQWkx4Cm5lTHJLeDF2K3R3ZkJibE9LRDZmcUJscGtjc0dnYzBkcHRmRFVXYXZHWnQ0NDFDNDdhSEk5VVVMYS8wQ0F3RUEKQVFLQ0FnRUFsbnE4R1NJUTZaS0JVZUpYZWZEbHBFNk5qd3RKY1ZQT0hKZmJJMzh0SVNFWWNHRXhPSDIzL1I2OAo3ZjVzNGVEd2MvMkxYNm1XRUxnVEdydEg2MDh0dGg0TGJ2bjJycEprT3phL2E2bVNOUzFoM0xPYlZiQlg5RVNWCjlaUXVrWm82REpIcGp0WC84WWw0enlaMnhXOGlOQ0JWZEY5WHdNa1crRDROVWRGY1MrZGZZVlBucENnZnVPNkgKVTN0NFRCN3F4OElhRkFnOHN1YUs5aWtMWWZOUk1Va2NaUHJBQ2ZxMHNPRmNDOWRnekdVTGxJTit0d3lKbmpWMApDM3M3OXNXZGpEVHpoaDI1eGRaOExZdC9IT0NyaGdYRnBPTG1XNDlCT21KZnFqaWRvRU93UStKbkFzYjlJWnZpCjhZSDZNZ3FJN0JnMER1ZnBHanh0UHhPUk02NC9pYzEvNzVyazF4V1lhNWZtZiswdjNUSUFiemtqYWNYQW4zRlIKdFBYckErcnRZUjMyMlhVdFI5eDh4c2pPQVdVMnRSTFY2VVltbUFjbnBLMzJSaXVGM21OL3R0MnVzeklNa1RLTQplVmYzaGYwenZqU0h2NzNLV3NqSUV2cFN6S3pPaXJ2RUhpVHJVYWU5dUpqNmNwTnpIRFRrcVlvaFh2Ynh1U29NCmhwbExQcVdhSTEyeXZ1dklMVVlPUkRSWG81eDYxWWg3cUtsRjlmc3ZIWXArMUM4djFUOHRMTDRGWTRsVWI5eDkKYUtIWWVlUEk5VlpNaFRpQUNwVE52eHVKZlp4NkpuaTNoVTdtdUNwVENIeEVncVNnZUVDWEVaYlZqVEMrWXAwbAphSUF5djYwKzd3WkdaOEJyVHA0K1dYWlh4OHp6Z3dxLzEyNmp6Q29TVWIyQ2owb2xHVkVDZ2dFQkFQNHVPc0ZiCm9DR0ZrcVFqaTd5SkEyRXVqczUzTHhrVzdxc0s3NWc4NUQwUEhTT1VnM2ZwVE1pZVcyNTB6ZWNidGZsbXBjWDUKRUdwL1ErMFgxTkJHdG9lRnVYajN4Ymdvem10RTh3UHN0MXE4RUtvVU1lT2t4KzFKRnJHakYrMktTdkxsc1c3SQpDWi9lL0pCNGh0NzlERFowSkxFS0pTWFJKTWVhRkt2TFdGTmtGYUIweXc0NlFGdUtwcmM1aFlMQ0dRdStIbkljCnpWMXdmYlZ1UFVmRDBoZmJiSll6dnk2ZTVnSDdBNjA4UkVKNmVocTlBYzZtblUwTm9WeDQva21xSytSS3FYVzMKYUErcXVVODZXK0Y0ZmtDaklTUXVtZWRMU1B4RlZqbVViWjVudlFycEVYRXlvcEdNVnM0WkVPbERNeUZTdWF3ZQptalhodEFkL3JVSTlVUHNDZ2dFQkFONUkxMkdtMUphbXNhWmQvcEdpQTlZcFhjcjdtSzQyOVk0ckRSQ0pVbm9ICjJwMHM3VXFvcnQ2VGQwZ2NGeUJiWUcvbFFLS0Y0TksrNDFIeTZhRUx6UHVDZEROemRQNkFxU3VJWEMzN2FkUSsKenZNK0g3bXJFN2xITEloMGxOb3I2MVdXUGEvQ0s2a01NcjhGOWxDWXhsMW1EekdTRmlNL2FTc3NLaE5mMmxSMQpjM0pmQ2hGQjRnbytCb0RlOFNSSWRXdW9XOWcvbFM2UDEySG85eDJIUEJXRHRrTE5zd0ViT0JmcFFxNEU0R21nCmc2dVRkYWw0Uy92Yk13SkhSeHVWT3JkS2ljVlhWRUFJWG1YUXlwMGNvd3JYSGVOdk81YUsyWVFCVnBKN01ldW4KZlJIbk9vUkRsd0tXTWsxME14YXpMUnVkQ0ZWKzc1VVYvb3hDZUhQTjFXY0NnZ0VBY1BlTTUzalliMjJWSWR3bQpjN0dWVGZES1NWclJGTjZMVG50Nnh2ZHhITzRGcmxXSUpKZ01wekV5UTZJb0RPblU4N1k2UVFXVDFURWd1RlFhCklrTDdScm9aRjNsUFo2ekRLUXVvMGZxMzl0eVVyM0p3UmROcmc3c3pHZG41ZlhvMEcwWVltTHJSQkR1dmxtbnEKejFvNXZrM2FMTkRzZDZVL0tuTUJjdVRhS1ozV3VzeU5ucEluSGtnK0ZqcTdhc1RuS3IvaGVpZnc0ZkZuL1dXMApXSnZnV1BnTmg2Z1I5UjlyN0Q5cWYrakVFYU9yZHd5L3E5K0RFOGJXQzJvKzRmQit0MlN6Y2YwRWc4b0Z0LytnCjdGR0lFeVF0UzQ1bW1sUnNhS3BNU3lUN255Wk43M1pzYVJudkJLOFJ1V0dNa1k5clB3a3NPaUlUdVpUSlZYZmEKUWhGTVZ3S0NBUUVBaTI1YmxBaUc3MXp1c0hIalhreW5aVzRiUkZrZmc2QTcxWXJScmg3RldvQ1VzK1RiaitwUgpqcEluejFhM2R2ZDZmWlhyUGtjR0tJdk9vYmZpcnI5dFBCS3ZleHFnTjRoVEZWaDZvZWxEai93NTZrQjh2QVZBCjRRWnhPOE1OSC9GT3RDZ0MxNzNQajBGMGozaFk4bU55Z21HamhDK2pyVVo0WExsZVJ6cm9BL1NNanlCb2V6eTkKWWpsWDhQeG5mSi9xNzdYeXJxbnJsUUpyVXlKRDZBVE5QcDJZOVR4OFhXUktnazB5STJBeHVIQVVSOHEra3FnLwoyV0s5RTEvTWpkUEV1ZmFLaHZ2cGdDVC91WlFIbEJmRGVlaEgra0xxdU5xdDZHekNkaTNLdVl3ZEd0N1ZTT1B3CjFKR01TaU5xYklIRitMMCszZ282bEdUd2YrQ3VGODMwWHdLQ0FRQXh2VkNHSkcyamtkaEwweXc0TGdkVGpGaGUKdHRQd1lDcXVYcnJON3ArdmNGYnhNSjdGU0ZYWXpqRkx1Vk9YY0xTS2dWYThPWnZzQVZjTnYxbU5DTTE0cDZjdgpYd0RUenBjeDlJbUk3TjNpSXFoT0M3SjJRQThpUDZ6VENMQ0pEZUZaaHZqUjJmUkRSK2ZoTFpaa0VoU1RwTE9MClJyTDZkN3MweUREeUpkYndleGxTck56Z0NicmE4SjFacWVIWWFGc0c2OEJNVUtwb3RLWVhIWXJyNE9OamloRjgKVlVvOE1BU1BtS0ViRVdzVkRVOFF0ajhjZXhoR2RvZW5CUVpvTE8xWDBubEVuVnBoZVZxTnN4LytYQUpLUFBVMQpKYjBuUXVIS051Uk1PK2gzSW1BeU1iRXI2ZGh0NlgvTktJN1BFVjZHejF3WXVFSUpMMEdhZys3Zk9IMmgKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K';
const testPublicKeyEncoded = 'LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQ0lqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FnOEFNSUlDQ2dLQ0FnRUEzTFJwemZ4WVYwa1k0N2dZaTVCQgp3UmhxcjNRVEk0Y1c1VllrT2l6ZndoMkdnVm1XOWVORDlyQkpDZnptVzdNRGxJNWFnUXhXeG1aMVpQQVdsbXNwCnpwMFVGS2ZmYW5RRTc2MTRUV3JrcDBtM2dSTHp2MEpVWjZlQ1lsNnJPQ0NFT0tCYjJvR1FFc0Q0WDFRUms0d1cKSERPcHJYdDVodDVKMkRNdWMzSVhJVVhZWjRKNEZTeHBWSWRrWE4ra0FzcVRUSzhBTWhBWGNFbFNDNGJyREcrcQp4dTJoYjRlVWFVdEY1SlNxSGF4dFlRbjM4VHlLZWRlM2RrLzl6aXpwd25TVDlaQjhveXdvejg3ZzdPaWhBMm5PCnhKWEIzYURlamxmdlh6MFZpMzZGWVFOVGI3dXQvUm5mUjFoSEJySm5NV21BWktmWFYwL0Z0bmhEUWN4QmxTa0UKSEErSWNxZCtDRzRhb0x6cXhaREkrM0tqUWZqcEhXYXp2VHNTM25uakUzc1VNZlVCU0ZBR3hYYzc3TkwyeXo1ZgpxRGI5THJ1aTE0OVQ1bXk3UDFYU29MY2NPSkVjaENwR05paE83S0k1czFsVzdQUVlORVJ1VVRyckZFam9IaE95CnhaMjBOSGh6R2FSbDBCWEk4UzFUZ0JRSGVnYVBXOW4rRDc3NFRHUjUwdkE1ZUNrRjBTQ0lyUHlBd1RlZENQbVQKMW5kUXdtbjZURk1QWklYd0RNNjdaUHFyM0Nzc1pvTzlHb0l4SHNhQ2k1MVhNd2MvVW9pZ3VsVnlXZEgwcEUzTgpmL2hFdXFLWUtRNVdVZU5kRERGZk1KQXpQWkx4bmVMckt4MXYrdHdmQmJsT0tENmZxQmxwa2NzR2djMGRwdGZEClVXYXZHWnQ0NDFDNDdhSEk5VVVMYS8wQ0F3RUFBUT09Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo='


if ((privateKeyEncoded === undefined || publicKeyEncoded === undefined) && process.env.NODE_ENV !== 'test')  {
    debug('Env JWT_PRIVATE_KEY and/or JWT_PUBLIC_KEY is not defined');
    process.exit(1);
}

const privateKey = String(Buffer.from(privateKeyEncoded ?? testPrivateKeyEncoded, 'base64'));
const publicKey = String(Buffer.from(privateKeyEncoded ?? testPublicKeyEncoded, 'base64'));

const options: jwt.SignOptions = { algorithm: 'RS256' };

export function sign(user: IUser): string {
    return jwt.sign({
        user
    } as IPayload, privateKey, options)
}

export function verify(bearer: string): Promise<IPayload | undefined> {
    return new Promise((resolve) => {
        return jwt.verify(bearer, publicKey, options, (error, decoded) => {
            if (error !== null || decoded === undefined) {
                resolve(undefined);
            } else {
                resolve(decoded as IPayload);
            }
        });
    })
}
